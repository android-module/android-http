plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
}

apply from: "${rootDir}/../versions.gradle"

def versions_retrofit = "2.9.0"
def versions_okhttp3 = "4.8.1"
def coroutines_version = "1.6.4"
dependencies {
    if(isRemote()){
        implementation "io.github.caldremch:http-core:$http_core_version"
    }else{
        implementation project(":http-core")
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:$versions_retrofit")
    implementation "io.github.caldremch:core-logger:$android_log_version"
    implementation("com.squareup.okhttp3:logging-interceptor:$versions_okhttp3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
}

ext {
    myLibraryVersion=coroutine_http_impl_version
    myLibraryName = "http-coroutine"
    myArtifactId = "http-coroutine"
    myLibraryDescription = "http request framework implementation"
}

//apply from: "../gradle-maven-kotlin-dsl/mavencentral-with-maven-publish.gradle"

if (hasProperty("isIdea") && isIdea.toBoolean()) {
    test {
        useJUnitPlatform()
    }
    repositories {
        mavenCentral()
    }
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}


test {
    useJUnitPlatform()
}



ext {
    libraryName = "http-coroutine"
    myLibraryVersion = http_coroutine_version
    myBintrayName = "http-coroutine"
    myArtifactId = myBintrayName
    myLibraryName = "http-coroutine"
    myLibraryDescription = "http coroutine"
}

publishMavenConfig(project)
