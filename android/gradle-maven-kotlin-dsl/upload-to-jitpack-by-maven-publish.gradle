buildscript {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven {url = uri("https://jitpack.io")}
    }
    dependencies {
        classpath("com.android.tools.build:gradle:4.0.1")
    }
}

static def printlnEx(log) {
    System.out.println("bintray-upload > " + log)
}

//finally, i forgot the meaning of kotlin dsl
//so i write this file
apply plugin: "maven-publish"

group = myPublishedGroupId
version = myLibraryVersion

def isAndroid = project.hasProperty("android")

printlnEx("isAndroid: " + isAndroid)


if (isAndroid) {
    task sourcesJar(type: Jar) {
        getArchiveClassifier().set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        getArchiveClassifier().set("javadoc")
        from javadoc.destinationDir
    }

} else {

    task sourcesJar(type: Jar, dependsOn: classes) {
        getArchiveClassifier().set("sources")
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        getArchiveClassifier().set("javadoc")
        from javadoc.destinationDir
    }
}

tasks.withType(Javadoc) {
    //fixed unknow tag error
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        JitPackPublication(MavenPublication) {
            //wrap with afterEvaluate,or no components found
            project.afterEvaluate {
                groupId = myPublishedGroupId
                version = myLibraryVersion
                artifactId = myArtifactId
                if (isAndroid) {
                    artifact sourcesJar
                    artifact javadocJar
                    from components.debug
                }else{
                    artifact sourcesJar
                    artifact javadocJar
                }
            }

            pom {
                name = myLibraryName
                description = myLibraryDescription
                url = mySiteUrl
                licenses {
                    license {
                        name = myLicenseName
                        url = myLicenseUrl
                    }
                }
                developers {
                    developer {
                        id = myDeveloperId
                        name = myDeveloperName
                        email = myDeveloperEmail
                    }
                }
                scm {
                    connection = myGitUrl
                    developerConnection = myGitUrl
                    url = mySiteUrl
                }
            }
        }
    }
}
