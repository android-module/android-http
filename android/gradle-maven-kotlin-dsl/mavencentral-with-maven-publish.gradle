
static def printlnEx(log) {
    System.out.println("mavenCentral-upload > " + log)
}

apply plugin: "maven-publish"
apply plugin: "signing"

group = myPublishedGroupId
version = myLibraryVersion

def isAndroid = project.hasProperty("android")

printlnEx("isAndroid: " + isAndroid)
printlnEx("group: " + group)
printlnEx("version: " + version)

if (isAndroid) {
    task sourcesJar(type: Jar) {
        getArchiveClassifier().set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

} else {
//    task sourcesJar(type: Jar) {
//        getArchiveClassifier().set("sources")
//        from sourceSets.main.allJava
//    }


//    task sourcesJar(type: Jar) {
//       if (project.hasProperty("android")) {
//
//            if (project.hasProperty("kotlin")) {
//                from android.sourceSets.main.java.getSrcDirs()
//            }else{
//                from android.sourceSets.main.java.sourceFiles
//            }
//
//        } else {
//            println project
//            from sourceSets.main.allSource
//        }
//        classifier = 'sources'
//    }

    java{
        withJavadocJar()
        withSourcesJar()
    }
}

tasks.withType(Javadoc) {
    //fixed unknow tag error
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}


printlnEx(ossrhUsername)
printlnEx(ossrhPassword)
printlnEx(project.getProperties().get("signing.keyId"))

publishing {

    repositories {

        maven {
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }

        maven {
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

    publications {
        sonatypePublication(MavenPublication) {
            //wrap with afterEvaluate,or no components found
            project.afterEvaluate {
                artifactId = myArtifactId
                if (isAndroid) {
                    artifact sourcesJar
//                    artifact androidJavaDocsJar
                    from components.debug
                }else{
                    from components.java
//                    artifact sourcesJar
                }
            }

            pom {
                name = myLibraryName
                description = myLibraryDescription
                url = mySiteUrl
                licenses {
                    license {
                        name = myLicenseName
                        url = myLicenseUrl
                    }
                }
                developers {
                    developer {
                        id = myDeveloperId
                        name = myDeveloperName
                        email = myDeveloperEmail
                    }
                }
                scm {
                    connection = myGitUrl
                    developerConnection = myGitUrl
                    url = mySiteUrl
                }
            }
        }
    }
}

signing{
    sign publishing.publications.sonatypePublication
}